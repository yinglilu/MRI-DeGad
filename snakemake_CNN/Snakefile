BATCH_SIZES = [32]
# 128, 256, 512]
LEARNING_RATES = [0.01,0.001]
#,0.0001,0.00001]
INITIAL_FILTER = [16, 32, 64]
DEPTHS = [3,4,5]
NUM_CONVS = [2,3]
PATCH_SIZE = [16,32]
rule all:
    input:
        expand("output/patch_batch_{size}_LR_{lr}_filter_{filter}_depth_{depth}_convs_{convs}/model_log.txt", size=BATCH_SIZES, lr=LEARNING_RATES, filter=INITIAL_FILTER,depth=DEPTHS,convs=NUM_CONVS)

rule copy_patches:
    output:
        train="/localscratch/tmp/training_samples_{p_size-1}.dat"
        val="/localscratch/tmp/validation_samples_{p_size-1}.dat"
    input:
        train="data/patches/training_samples_{p_size-1}.dat"
        val="data/patches/validation_samples_{p_size-1}.dat"
    localrule: True
    shell:
        "cp {input.train} {input.val} /local/tmp/ 
       

rule train:
    input:
        train="/localscratch/tmp/training_samples_31.dat"
        val="/localscratch/tmp/validation_samples_31.dat" # change from hardcode later
    output:                                                                                         
        log="output/patch_batch_{size}_LR_{lr}_filter_{filter}_depth_{depth}_convs_{convs}/model_log.txt"
    params:
        batch_size=lambda wildcards: wildcards.size,
        lr=lambda wildcards: wildcards.lr,
        ini_filter=lambda wildcards: wildcards.filter,
        depth=lambda wildcards: wildcards.depth,
        num_convs= lambda wildcards: wildcards.convs
    threads: 8
    resources:
        runtime=60*24*3 #time in minutes (3 days)
        mem_mb=32000
        gpus=1
    shell:
        "python3 scripts/training_degad_CNN.py --input {input.train} {input.val} --batch_size {params.batch_size} --lr {params.lr} --ini_filter {params.ini_filter} --depth {params.depth} --num_conv {params.num_convs}  > {output.log}"
